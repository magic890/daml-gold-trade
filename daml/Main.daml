module Main where

import DA.Text as T
import DA.List
import DA.Date as D
import DA.Optional


-- getCurrentOwner: 
--   Returns the head of the list of people that have the pledge of the asset (i.e. the current owner),
--      or in case of no pledge, the issuer of the asset (i.e. the rightful owner).
getCurrentOwner : [Party] -> Party -> Party
getCurrentOwner [] issuer = issuer
getCurrentOwner [x] issuer = x
getCurrentOwner [x, _] issuer = x
getCurrentOwner x issuer = getCurrentOwner x issuer


-- Shorthand notation for returned data type inside Update instructions (i.e. Choice return)
type AssetId = ContractId Asset
type AssetPledgeProposalId = ContractId AssetPledgeProposal


-- Asset
--   Holds information about the asset.
template Asset
  with
    issuer: Party -- Rightful owner
    pledgedTo: [Party] -- Chain of custody in case of pledging. The head is the current owner
    pledgedInDate: [Date]
    pledgedBearingInterest: [Decimal]
    name: Text -- Asset description
    value: Decimal -- Nominal value
    currency: Text -- Nominal value currency
  where
    signatory issuer, pledgedTo -- Who can archive (destroy) the contract

    ensure
      name /= ""
      && value > 0.0
      && T.isUpper currency
      && unique pledgedTo -- Not possible to pledge twice to the same person

    let currentOwner = getCurrentOwner pledgedTo issuer

    choice PledgeAssetTo: AssetPledgeProposalId -- Choice return data type (last line of do block)
      with -- Input params
        proposalReceiver: Party
        proposalDate: Date
        proposalBearingInterest: Decimal
        
      controller currentOwner -- Who can exercise this choice
      do
        assertMsg "You can't pledge the asset to the issuer." (issuer /= proposalReceiver)
        assertMsg "Pledgers can't pledge the asset back to themself." (isNone (elemIndex proposalReceiver pledgedTo))
        create AssetPledgeProposal with 
          asset = this
          ..

    choice ReturnAsset: AssetId
      with
        date: Date
      controller currentOwner
      do
        assertMsg "You can't return an asset that you own to yourself." (currentOwner /= issuer)
        
        let interestPeriod: Decimal = 365.0
        let daysAccruedInterest: Int = D.subDate date (head pledgedInDate)
        let interestRate: Decimal = head pledgedBearingInterest
        -- Simple Interest = Principal * Rate * Time
        let interestEarned: Decimal = value * interestRate * intToDecimal daysAccruedInterest / interestPeriod

        let previousOwner = getCurrentOwner (tail pledgedTo) issuer
        
        create Payment with
          sender = currentOwner
          receiver = previousOwner
          value = interestEarned
          ..

        create Asset with 
          pledgedTo = tail pledgedTo
          pledgedInDate = tail pledgedInDate
          pledgedBearingInterest = tail pledgedBearingInterest
          ..


template AssetPledgeProposal
  with 
    asset: Asset
    proposalReceiver: Party
    proposalDate: Date
    proposalBearingInterest: Decimal
  where
    signatory asset.issuer, asset.pledgedTo
    observer proposalReceiver

    let currentOwner = getCurrentOwner asset.pledgedTo asset.issuer

    choice Accept: AssetId
      with
        date: Date
      controller proposalReceiver
      do 
        create Asset with 
          issuer = asset.issuer
          pledgedTo = proposalReceiver :: asset.pledgedTo
          pledgedInDate = proposalDate :: asset.pledgedInDate
          pledgedBearingInterest = proposalBearingInterest :: asset.pledgedBearingInterest
          name = asset.name
          value = asset.value
          currency = asset.currency

    choice Reject: AssetId
      with
        date: Date
      controller proposalReceiver, currentOwner
      do 
        create asset


template Payment
  with
    date: Date
    sender: Party
    receiver: Party
    value: Decimal
    currency: Text
  where
    signatory sender
    observer receiver

    ensure 
      T.isUpper currency
