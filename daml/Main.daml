module Main where

import Daml.Script
import DA.Text as T
-- import DA.Optional

-- data DataChoice assetId assetPledgeProposalId = AssetId assetId | AssetPledgeProposalId assetPledgeProposalId



type AssetId = ContractId Asset
type AssetPledgeProposalId = ContractId AssetPledgeProposal


template Asset
  with
    -- issuer: Optional(Party)
    issuer: Party
    owner: Party
    name: Text
    value: Decimal
    currency: Text
  where
    signatory issuer, owner -- Who can archive (destroy) the contract
    observer issuer, owner -- Who can see the contract

    ensure
      name /= ""
      && value > 0.0
      && T.isUpper currency

    choice PledgeAssetTo : AssetPledgeProposalId -- Choice return data type (last line of do block)
      with -- Input params
        newOwner: Party 
      controller owner -- Who can exercise this choice
      do
        assertMsg "You can't pledge your asset to yourself." (owner /= newOwner)
        create AssetPledgeProposal with ..
    
    choice ReturnAsset : AssetId
      controller owner
      do
        assertMsg "You can't return an asset that you own to yourself." (owner /= issuer)
        create Asset with owner = issuer, ..


template AssetPledgeProposal
  with 
    -- issuer: Optional(Party)
    issuer: Party
    owner: Party
    newOwner: Party
    name: Text
    value: Decimal
    currency: Text
  where
    signatory issuer, owner
    observer issuer, owner, newOwner

    -- TODO: ensure

    choice Accept: AssetId
      controller newOwner
      do 
        create Asset with owner = newOwner, ..

    choice Reject: AssetId
      controller newOwner, owner
      do create Asset with ..



-- -- Track chain of pledges
-- template AssetPledged with
--     pledgedBy       : Party
--     interest        : Decimal
--     expirationDays  : Decimal
--     autoRenwal      : Bool
--     signedOn        : Date
--     asset           : Party
--     owner           : Party
--   where
--     -- TODO: ensure constraints
--     signatory owner
--     observer owner, pledgedBy -- Both parties can see the contract  
    
--     choice Pledge : AssetPledgedId
--       with
--         newPledgedTo      : Party
--         newInterest       : Decimal
--         newExpirationDays : Decimal
--         newAutoRenewal     : Bool
--         newSignedOn       : Date
--       controller owner
--       do
--         archive self
--         create AssetPledged with
--           pledgedBy = owner
--           interest = newInterest
--           expirationDays = newExpirationDays
--           autoRenwal = newAutoRenewal
--           signedOn = newSignedOn
--           owner = newPledgedTo
--           asset = asset

--     -- Only current owner can revoke the last pledge.
--     choice RevokePledge : AssetPledgedId
--       with 
--         assetPledgedCid : AssetPledgedId
--         userRevokingThePledge   : Party
--       controller owner, pledgedBy
--       do 
--         assetPledgedId <- fetch assetPledgedCid
--         -- exercise asset Give
--         --   with newOwner = owner !! 1 -- 2nd position owner in list
--         archive self
--         create AssetPledged with
--           pledgedBy = assetPledgedId.pledgedBy
--           interest = assetPledgedId.interest
--           expirationDays = assetPledgedId.expirationDays
--           autoRenwal = assetPledgedId.autoRenwal
--           signedOn = assetPledgedId.signedOn
--           owner = assetPledgedId.pledgedBy
--           asset = assetPledgedId.asset


--setup : Script AssetPledgedId


setup : Script ()
setup = script do

-- user_setup_begin
  alice <- allocatePartyWithHint "Alice" (PartyIdHint "Alice")
  bob <- allocatePartyWithHint "Bob" (PartyIdHint "Bob")
  aliceId <- validateUserId "alice"
  bobId <- validateUserId "bob"
  createUser (User aliceId (Some alice)) [CanActAs alice]
  createUser (User bobId (Some bob)) [CanActAs bob]
-- user_setup_end

  aliceGold1 <- submit alice do
    createCmd Asset with
      issuer = alice
      owner = alice
      name = "Gold Bar 1oz"
      value = 1800.00
      currency = "CHF"

  aliceGold2 <- submit alice do
    createCmd Asset with
      issuer = alice
      owner = alice
      name = "Gold Bar 2oz"
      value = 3600.00
      currency = "CHF"

  bobGold1 <- submit bob do
    createCmd Asset with
      issuer = bob
      owner = bob
      name = "Gold Bar 0.5kg"
      value = 27000.00
      currency = "CHF"

  alicePledgeGold1ToBob1 <- submit alice do 
    exerciseCmd aliceGold1 PledgeAssetTo with 
      newOwner = bob

  alicePledgeGold1ToBob1Accept <-
    submit bob do exerciseCmd alicePledgeGold1ToBob1 Accept

  bobReturn1Oz <-
    submit bob do exerciseCmd alicePledgeGold1ToBob1Accept ReturnAsset

  -- aliceReturn1Oz <-
  --   submit alice do exerciseCmd bobReturn1Oz ReturnAsset

  -- alicePledgeToBob1 <- submit alice do
  --   createCmd AssetPledged with
  --     pledgedBy = alice
  --     interest = 5
  --     expirationDays = 1
  --     autoRenwal = False
  --     signedOn  = date 2022 Dec 29
  --     asset = aliceGold1
  --     owner = bob

  pure()